(*
  TINTEGERARRAY
*)

function tIntegerArray.concat(vIntegers:tIntegerArray):tIntegerArray;
begin
  insert(self,vIntegers);
  exit(vIntegers);
end;

function tIntegerArray.contains(vInteger:integer):boolean;
var _Index:integer;
begin
  for _Index to high(self) do
    if self[_Index]=vInteger then
      exit(true);
end;

function tIntegerArray.empty():boolean;
begin exit(self.indexes()=0);end;

function tIntegerArray.eq(vIndex:integer):integer;
begin
  if vIndex<self.indexes() then
    exit(self[vIndex]);
end;

function tIntegerArray.find(vInteger:integer):tIntegerArray;
begin exit(self.find([vInteger]));end;

function tIntegerArray.find(vIntegers:tIntegerArray):tIntegerArray;overload;
function compareAll(vInteger:integer;vIntegers:tIntegerArray):boolean;
begin exit(vIntegers.contains(vInteger));end;
function compareRange(vInteger:integer;vIntegers:tIntegerArray):boolean;
begin exit((vInteger>=vIntegers[0]) and (vInteger<=vIntegers[high(vIntegers)]));end;
var
  _FunctionCompare:function(vValue:integer;vValues:tIntegerArray):boolean=@compareAll;
  _Integer,
    _IntegerIndex,
    _ResultIndex:integer;
begin
    if (not self.empty()) and (not vIntegers.empty()) then
    begin
      if vIntegers.range() then
        _FunctionCompare:=@compareRange;
      setLength(result,self.indexes());
      for _IntegerIndex to self.indexes()-1 do
      begin
        _Integer:=self[_IntegerIndex];
        if _FunctionCompare(_Integer,vIntegers) then
        begin
          result[_ResultIndex]:=_Integer;{Prevents strange access violations}
          _ResultIndex+=1;
        end;
      end;
      setLength(result,_ResultIndex);
      exit(result);
    end;
end;

function tIntegerArray.first():integer;
begin
  if not self.empty() then
    exit(self[0]);
end;

function tIntegerArray.indexes():integer;
begin exit(length(self));end;

function tIntegerArray.pop():integer;
var _High:integer;
begin
  if not self.empty() then
  begin
    result:=self[_High:=high(self)];
    setLength(self,_High);
    exit(result);
  end;
end;

function tIntegerArray.push(vInteger:integer):integer;
var _Length:integer;
begin
  setLength(self,(_Length:=self.indexes())+1);
  self[_Length]:=vInteger;
  exit(_Length+1);
end;

function tIntegerArray.range():boolean;
var _Index:integer;
begin
  for _Index to high(self)-1 do
    if self[_Index]<>self[_Index+1]-1 then
      break;
  exit((self.indexes()>1) and (_Index=high(self)));
end;

function tIntegerArray.range(vMinimum,vMaximum:integer):tIntegerArray;overload;
var
  _Index,
    _Maximum,
    _Minimum:integer;
begin
  _Minimum:=min(vMinimum,vMaximum);
  _Maximum:=max(vMinimum,vMaximum);
  setLength(result,_Maximum-_Minimum+1);
  for _Index to _Maximum-_Minimum do
    result[_Index]:=_Minimum+_Index;
end;

function tIntegerArray.last():integer;
begin
  if not self.empty() then
    exit(self[high(self)]);
end;

function tIntegerArray.reverse():tIntegerArray;
var
  _Decrease,
    _Increase:integer;
begin
  setLength(result,self.indexes());
  for _Decrease:=high(self) downTo 0 do
  begin
    result[_Increase]:=self[_Decrease];
    _Increase+=1;
  end;
  exit(result);
end;

function tIntegerArray.shuffle():tIntegerArray;
var _Index:integer;
begin
  for _Index:=high(result:=self) downto 0 do
    system.swap(result[_Index],result[random(_Index+1)]);
  exit(result);
end;
