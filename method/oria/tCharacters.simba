(*
  TCHARACTERS
*)

function tCharacters.bounds():tBox;
begin exit(self.boxes().bounds());end;

function tCharacters.boundsX1(vBoundsX1:integer):tCharacters;
begin exit(self.find('bounds.x1',vBoundsX1));end;

function tCharacters.boundsX1(vBoundsX1s:tIntegerArray):tCharacters;overload;
begin exit(self.find('bounds.x1',vBoundsX1s));end;

function tCharacters.boundsX2(vBoundsX2:integer):tCharacters;
begin exit(self.find('bounds.x2',vBoundsX2));end;

function tCharacters.boundsX2(vBoundsX2s:tIntegerArray):tCharacters;overload;
begin exit(self.find('bounds.x2',vBoundsX2s));end;

function tCharacters.boundsY1(vBoundsY1:integer):tCharacters;
begin exit(self.find('bounds.y1',vBoundsY1));end;

function tCharacters.boundsY1(vBoundsY1s:tIntegerArray):tCharacters;overload;
begin exit(self.find('bounds.y1',vBoundsY1s));end;

function tCharacters.boundsY2(vBoundsY2:integer):tCharacters;
begin exit(self.find('bounds.y2',vBoundsY2));end;

function tCharacters.boundsY2(vBoundsY2s:tIntegerArray):tCharacters;overload;
begin exit(self.find('bounds.y2',vBoundsY2s));end;

function tCharacters.boxes():tBoxArray;
var _Index:integer;
begin
  setLength(result,self.indexes());
  for _Index to high(self) do
    result[_Index]:=self[_Index].bounds.fix();
  exit(result);
end;

function tCharacters.closest(vCharacter:tCharacter):tCharacters;
begin exit(self.closest(vCharacter.position));end;

function tCharacters.closest(vModel:tModel):tCharacters;overload;
begin exit(self.closest(vModel.position));end;

function tCharacters.closest(vPoint:tPoint):tCharacters;overload;
var
  _Distance:array of extended;
  _High,
    _Index,
    _Left,
    _Right:integer;
  _TempDistance:extended;
  _TempCharacter:tCharacter;
begin
  result:=self;
  setLength(_Distance,length(result));
  for _Index to _High:=high(result) do
    _Distance[_Index]:=self[_Index].distance(vPoint);
  for _Left to _High do
    for _Right:=_Left+1 to _High do
      if _Distance[_Left]>_Distance[_Right] then
      begin
        _TempDistance:=_Distance[_Left];
        _Distance[_Left]:=_Distance[_Right];
        _Distance[_Right]:=_TempDistance;
        _TempCharacter:=result[_Left];
        result[_Left]:=result[_Right];
        result[_Right]:=_TempCharacter;
      end;
  exit(result);
end;

function tCharacters.closest(vTexture:tTexture):tCharacters;overload;
begin exit(self.closest(vTexture.position));end;

function tCharacters.color(vColor:integer):tCharacters;
begin exit(self.find('color',vColor));end;

function tCharacters.color(vColors:tIntegerArray):tCharacters;overload;
begin exit(self.find('color',vColors));end;

function tCharacters.concat(vCharacters:tCharacters):tCharacters;
begin
  insert(vCharacters,self);
  exit(self);
end;

function tCharacters.contains(vCharacter:tCharacter):boolean;
var _Index:integer;
begin
  for _Index to high(self) do
    if compareMem(@self[_Index],@vCharacter,sizeOf(tCharacter)) then
      exit(true);
end;

function tCharacters.debug(vClear:boolean=false):tCharacters;
var
  _Debug,
    _Message,
    _Name:string;
  _Index:integer;
begin
  if vClear then
    clearDebug();
  _Name:=getGlobalName(@self);
  if _Name='' then
    _Name:='tCharacters';
  if length(self) then
  begin
    _Debug:=tOGL.uptime()+' | '+tOGL.script()+' > '+_Name+'[';
    _Message:=_Debug+'0..'+toStr(high(self))+']'+#13#10;
    for _Index to high(self) do
      _Message+=_Debug+toStr(_Index)+'] > '+toStr(self[_Index])+#13#10;
   _Message:=trim(_Message);
  end
  else
    _Message:=ogl.uptime()+' | '+ogl.script()+' > '+_Name+'[]';
  writeLN(_Message);
  exit(self);
end;

function tCharacters.delete(vIndex:integer):tCharacter;
begin exit(self.splice(vIndex,1).eq(0));end;

function tCharacters.empty():boolean;
begin exit(self.indexes()=0);end;

function tCharacters.eq(vIndex:integer):tCharacter;
begin
  if vIndex<self.indexes() then
    exit(self[vIndex]);
end;

function tCharacters.finds(vProperty:string;vValue:integer):tCharacters;
begin exit(self.find(vProperty,[vValue]));end;

function tCharacters.find(vProperty:string;vInteger:integer):tCharacters;
begin exit(self.find(vProperty,[vInteger]));end;

function tCharacters.find(vProperty:string;vInteger:tIntegerArray):tCharacters;overload;
function compareAll(vInteger:integer;vIntegers:tIntegerArray):boolean;
var _Index:integer;
begin
  for _Index to high(vIntegers) do
    if vInteger=vIntegers[_Index] then
      exit(true);
end;
function compareRange(vInteger:integer;vIntegers:tIntegerArray):boolean;
begin exit((vInteger>=vIntegers.first()) and (vInteger<=vIntegers.last()));end;
function readByte(vPointer:pointer):integer;
begin exit(byte(vPointer^));end;
function readInteger(vPointer:pointer):integer;
begin exit(integer(vPointer^));end;
var
  _Count,
    _Index,
    _Offset:integer;
  _FunctionCompare:function(vInteger:integer;vInteger:tIntegerArray):boolean=@compareAll;
  _FunctionRead:function(vPointer:pointer):integer;
  _Pointer:pointer;
begin
  _Count:=self.indexes();
  if _Count then
  begin
    _Offset:=tCharacter.offset(vProperty)
    if (_Offset<>-1) and (not vInteger.empty()) then
    begin
      if vInteger.range() then
        _FunctionCompare:=@compareRange;
      case lowercase(vProperty) of
        'letter': _FunctionRead:=@readByte;
        else      _FunctionRead:=@readInteger;
      end;
      _Pointer:=pointer(self)+_Offset;
      setLength(result,_Count);
      for 0 to _Count-1 do
      begin
        if _FunctionCompare(_FunctionRead(_Pointer),vInteger) then
        begin
          result[_Index]:=tCharacter((_Pointer-_Offset)^);
          _Index+=1;
        end;
        _Pointer+=sizeOf(tCharacter);
      end;
      setLength(result,_Index);
      exit(result);
    end;
  end;
end;

function tCharacters.first():tCharacter;
begin
  if not self.empty() then
    exit(self[0]);
end;

function tCharacters.height(vHeight:integer):tCharacters;
begin exit(self.find('height',vHeight));end;

function tCharacters.height(vHeights:tIntegerArray):tCharacters;overload;
begin exit(self.find('height',vHeights));end;

function tCharacters.id(vID:integer):tCharacters;
begin exit(self.find('id',vID));end;

function tCharacters.id(vIDs:tIntegerArray):tCharacters;overload;
begin exit(self.find('id',vIDs));end;

function tCharacters.index(vProperty:string;vValue:integer):integer;
begin exit(self.index(vProperty,[vValue]));end;

function tCharacters.index(vProperty:string;vValues:tIntegerArray):integer;overload;
function compareAll(vValue:integer;vValues:tIntegerArray):boolean;
var _Index:integer;
begin
  for _Index to high(vValues) do
    if vValue=vValues[_Index] then
      exit(true);
end;
function compareRange(vValue:integer;vValues:tIntegerArray):boolean;
begin exit((vValue>=vValues[0]) and (vValue<=vValues[high(vValues)]));end;
function readByte(vPointer:pointer):integer;
begin exit(byte(vPointer^));end;
function readInteger(vPointer:pointer):integer;
begin exit(integer(vPointer^));end;
var
  _Count,
    _Index,
    _Offset:integer;
  _FunctionCompare:function(vValue:integer;vValues:tIntegerArray):boolean=@compareAll;
  _FunctionRead:function(vPointer:pointer):integer;
  _Pointer:pointer;
begin
  if (_Count:=self.indexes()) then
    if (_Offset:=tCharacter.offset(vProperty))<>-1 then
      if not vValues.empty() then
      begin
        if vValues.range() then
          _FunctionCompare:=@compareRange;
        case lowercase(vProperty) of
          'letter': _FunctionRead:=@readByte;
          else      _FunctionRead:=@readInteger;
        end;
        _Pointer:=pointer(self)+_Offset;
        for _Index to _Count-1 do
        begin
          if _FunctionCompare(_FunctionRead(_Pointer),vValues) then
            exit(_Index);
          _Pointer+=sizeOf(tCharacter);
        end;
      end;
  exit(-1);
end;

function tCharacters.indexes():integer;
begin exit(length(self));end;

function tCharacters.last():tCharacter;
begin
  if not self.empty() then
    exit(self[high(self)]);
end;

function tCharacters.letter(vLetter:char):tCharacters;
begin exit(self.find('letter',byte(vLetter)));end;

function tCharacters.letter(vLetters:tCharArray):tCharacters;overload;
begin exit(self.find('letter',vLetters.integers()));end;

procedure tCharacters.mouse(vAction:string);
begin
  if not self.empty() then
    self[0].bounds.mouse(vAction);
end;

function tCharacters.nonempty():boolean;
begin exit(not self.empty())end;

function tCharacters.pop():tCharacter;
var _High:integer;
begin
  if not self.empty() then
  begin
    _High:=high(self);
    result:=self[_High];
    setLength(self,_High);
    exit(result);
  end;
end;

function tCharacters.positionX(vPositionX:integer):tCharacters;
begin exit(self.find('position.x',vPositionX));end;

function tCharacters.positionX(vPositionXs:tIntegerArray):tCharacters;overload;
begin exit(self.find('position.x',vPositionXs));end;

function tCharacters.positionY(vPositionY:integer):tCharacters;
begin exit(self.find('position.y',vPositionY));end;

function tCharacters.positionY(vPositionYs:tIntegerArray):tCharacters;overload;
begin exit(self.find('position.y',vPositionYs));end;

function tCharacters.push(vCharacter:tCharacter):integer;
var _Length:integer;
begin
  setLength(self,(_Length:=self.indexes())+1);
  self[_Length]:=vCharacter;
  exit(_Length+1);
end;

function tCharacters.reverse():tCharacters;
var
  _Decrease,
    _Increase:integer;
begin
  setLength(result,self.indexes());
  for _Decrease:=high(self) downTo 0 do
  begin
    result[_Increase]:=self[_Decrease];
    _Increase+=1;
  end;
  exit(result);
end;

function tCharacters.shift():tCharacter;
begin exit(self.splice(0,1).eq(0));end;

function tCharacters.shuffle(vOverwrite:boolean=false):tCharacters;
var _Index:integer;
begin
  result:=self;
  for _Index:=high(result) downto 0 do
    system.swap(result[_Index],result[random(_Index+1)]);
  if vOverwrite then
    self:=result;
  exit(result);
end;

function tCharacters.splice(vIndex,vCount:integer):tCharacters;
var
  _CharacterIndex,
    _High,
    _ResultIndex:integer;
begin
  _High:=high(self);
  if (vIndex<=_High) and (vCount>0) then
  begin
    setLength(result,length(self));
    for _CharacterIndex to _High do
    begin
      if (_CharacterIndex>=vIndex) and (_ResultIndex<vCount) then
      begin
        result[_ResultIndex]:=self[_CharacterIndex];
        _ResultIndex+=1;
      end
      else
        self[_CharacterIndex-_ResultIndex]:=self[_CharacterIndex];
    end;
    setLength(result,_ResultIndex);
    setLength(self,_CharacterIndex-_ResultIndex);
  end;
end;

function tCharacters.string():string;
var _Index:integer;
begin
  for _Index to high(self) do
    result+=self[_Index].letter;
  exit(result);
end;

function tCharacters.unshift(vCharacter:tCharacter):integer;
begin
  insert([vCharacter],self);
  exit(length(self));
end;

function tCharacters.width(vWidth:integer):tCharacters;
begin exit(self.find('width',vWidth));end;

function tCharacters.width(vWidths:tIntegerArray):tCharacters;overload;
begin exit(self.find('width',vWidths));end;
