(*
  TPOINT
*)

function tPoint.debug(vClear:boolean=false):tPoint;
var
  _Debug,
    _Name:string;
begin
  if vClear then
    clearDebug();
  _Name:=getGlobalName(@self);
  if _Name='' then
    _Name:='tPoint';
  writeLN(ogl.uptime()+' | '+ogl.script()+' > '+_Name+' > '+toStr(self));
  exit(self);
end;

function tPoint.defined():boolean;
begin exit(self.unequal([]));end;

function tPoint.distance(vPoint:tPoint):integer;
begin exit(round(sqrt(pow(self.x-vPoint.x,2)+pow(self.y-vPoint.y,2))));end;

function tPoint.equals(vPoint:tPoint):boolean;
begin exit(compareMem(@self,@vPoint,sizeOf(tPoint)));end;

function tPoint.inside(vBox:tBox):boolean;
begin exit(pointInBox(self,vBox));end;

function tPoint.inside(vPoints:tPointArray):boolean;overload;
var
  _Index,
    _IndexMinus:integer;
begin
  _IndexMinus:=high(vPoints);
  for _Index to _IndexMinus do
  begin
    if ((vPoints[_Index].y>self.y)<>(vPoints[_IndexMinus].y>self.y)) and (self.x<(vPoints[_IndexMinus].x-vPoints[_Index].x)*(self.y-vPoints[_Index].y)/(vPoints[_IndexMinus].y-vPoints[_Index].y)+vPoints[_Index].x) then
      result:=not result;
    _IndexMinus:=_Index;
  end;
  exit(result);
end;

procedure tPoint.mouse(vAction:string);
var _Mouse:tMouse;
begin
  _Mouse:=getGlobalPtr('mouse');{Prevents strange access violations}
  case lowercase(vAction) of
    'down': _Mouse.down(self);
    'left': _Mouse.left(self);
    'move': _Mouse.move(self);
    'right':_Mouse.right(self);
    'up':   _Mouse.up(self);
  end;
end;

function tPoint.offset(vProperty:string):integer;
var _Point:^tPoint;
begin
  case lowercase(vProperty) of
    'x':  exit(ptrUInt(@_Point^.x));
    'y':  exit(ptrUInt(@_Point^.y));
    else  exit(-1);
  end;
end;

function tPoint.unequal(vPoint:tPoint):boolean;
begin exit(not self.equals(vPoint));end;
