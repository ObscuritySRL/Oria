(*
  TSTRINGARRAY
*)

function tStringArray.concat(vStrings:tStringArray):tStringArray;
begin
  insert(self,vStrings);
  exit(vStrings);
end;

function tStringArray.contains(vString:string):boolean;
var _Index:integer;
begin
  for _Index to high(self) do
    if self[_Index]=vString then
      exit(true)
end;

function tStringArray.empty():boolean;
begin exit(self.indexes()=0);end;

function tStringArray.eq(vIndex:integer):string;
begin
  if vIndex<self.indexes() then
    exit(self[vIndex]);
end;

function tStringArray.find(vString:string):tStringArray;
begin exit(self.find([vString]));end;

function tStringArray.find(vStrings:tStringArray):tStringArray;overload;
var
  _StringIndex,
    _ResultIndex:integer;
    _String:string;
begin
  if (not self.empty()) and (not vStrings.empty()) then
    begin
      setLength(result,self.indexes());
      for _StringIndex to self.indexes()-1 do
      begin
        _String:=self[_StringIndex];
        if vStrings.contains(_String) then
        begin
          result[_ResultIndex]:=_String;{Prevents strange access violations}
          _ResultIndex+=1;
        end;
      end;
      setLength(result,_ResultIndex);
      exit(result);
    end;
end;

function tStringArray.first():string;
begin
  if not self.empty() then
    exit(self[0]);
end;

function tStringArray.indexes():integer;
begin exit(length(self));end;

function tStringArray.last():string;
begin
  if not self.empty() then
    exit(self[high(self)]);
end;

function tStringArray.pop():string;
var _High:integer;
begin
  if not self.empty() then
  begin
    result:=self[_High:=high(self)];
    setLength(self,_High);
    exit(result);
  end;
end;

function tStringArray.push(vString:string):integer;
var _Length:integer;
begin
  setLength(self,(_Length:=self.indexes())+1);
  self[_Length]:=vString;
  exit(_Length+1);
end;

function tStringArray.reverse():tStringArray;
var
  _Decrease,
    _Increase:integer;
begin
  setLength(result,self.indexes());
  for _Decrease:=high(self) downTo 0 do
  begin
    result[_Increase]:=self[_Decrease];
    _Increase+=1;
  end;
  exit(result);
end;

function tStringArray.shuffle():tStringArray;
var _Index:integer;
begin
  for _Index:=high(result:=self) downto 0 do
    system.swap(result[_Index],result[random(_Index+1)]);
  exit(result);
end;
