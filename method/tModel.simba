(*
  TMODEL
*)

function tModel.debug(vClear:boolean=false):tModel;
begin
  if vClear then
    clearDebug();
  writeLN(ogl.uptime(),' | ',ogl.script(),' > tModel > ',self);
  exit(self);
end;

function tModel.distance(vPoint:tPoint):integer;
begin exit(self.position.distance(vPoint));end;

function tModel.equals(vModel:tModel):boolean;
begin exit(compareMem(@self,@vModel,ogl.size.model));end;

function tModel.inside(vBox:tBox;vBounds:boolean=false):boolean;
begin
  if vBounds then
    exit(self.bounds.inside(vBox))
  else
    exit(self.position.inside(vBox));
end;

function tModel.inside(vPoints:tPointArray;vBounds:boolean=false):boolean;overload;
begin
  if vBounds then
    exit(self.bounds.inside(vPoints))
  else
    exit(self.position.inside(vPoints));
end;

procedure tModel.mouse(vAction:string);
begin self.bounds.point().mouse(vAction);end;

function tModel.offset(vProperty:string):integer;
var _Model:^tModel;
begin
  case lowercase(vProperty) of
    'bounds':       exit(ptrUInt(@_Model^.bounds));
      'bounds.x1':  exit(ptrUInt(@_Model^.bounds.x1));
      'bounds.x2':  exit(ptrUInt(@_Model^.bounds.x2));
      'bounds.y1':  exit(ptrUInt(@_Model^.bounds.y1));
      'bounds.y2':  exit(ptrUInt(@_Model^.bounds.y2));
    'height':       exit(ptrUInt(@_Model^.height));
    'id':           exit(ptrUInt(@_Model^.id));
    'position':     exit(ptrUInt(@_Model^.position));
      'position.x': exit(ptrUInt(@_Model^.position.x));
      'position.y': exit(ptrUInt(@_Model^.position.y));
    'scale':        exit(ptrUInt(@_Model^.scale));
    'width':        exit(ptrUInt(@_Model^.width));
    else            exit(-1);
  end;
end;

function tModel.point():tPoint;
begin exit(self.bounds.point());end;
