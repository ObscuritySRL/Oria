(*
  TMODELS
*)

function tModels.boundsX1(vBoundsX1:integer):tModels;
begin exit(self.find('bounds.x1',vBoundsX1));end;

function tModels.boundsX1(vBoundsX1s:tIntegerArray):tModels;overload;
begin exit(self.find('bounds.x1',vBoundsX1s));end;

function tModels.boundsX2(vBoundsX2:integer):tModels;
begin exit(self.find('bounds.x2',vBoundsX2));end;

function tModels.boundsX2(vBoundsX2s:tIntegerArray):tModels;overload;
begin exit(self.find('bounds.x2',vBoundsX2s));end;

function tModels.boundsY1(vBoundsY1:integer):tModels;
begin exit(self.find('bounds.y1',vBoundsY1));end;

function tModels.boundsY1(vBoundsY1s:tIntegerArray):tModels;overload;
begin exit(self.find('bounds.y1',vBoundsY1s));end;

function tModels.boundsY2(vBoundsY2:integer):tModels;
begin exit(self.find('bounds.y2',vBoundsY2));end;

function tModels.boundsY2(vBoundsY2s:tIntegerArray):tModels;overload;
begin exit(self.find('bounds.y2',vBoundsY2s));end;

function tModels.empty():boolean;
begin exit(length(self)=0);end;

function tModels.eq(vIndex:integer):tModel;
begin
  if vIndex<self.indexes() then
    exit(self[vIndex]);
end;

function tModels.find(vProperty:string;vValue:integer):tModels;
begin exit(self.find(vProperty,[vValue]));end;

function tModels.find(vProperty:string;vValues:tIntegerArray):tModels;overload;
function compareAll(vValue:integer;vValues:tIntegerArray):boolean;
var _Index:integer;
begin
  for _Index to high(vValues) do
    if vValue=vValues[_Index] then
      exit(true);
end;
function compareRange(vValue:integer;vValues:tIntegerArray):boolean;
begin exit((vValue>=vValues[0]) and (vValue<=vValues[high(vValues)]));end;
var
  _FunctionCompare:function(vValue:integer;vValues:tIntegerArray):boolean=@compareAll;
  _ModelCount,
    _ModelIndex,
    _ModelOffset:integer;
  _ModelPointer:pointer;
begin
  if (_ModelCount:=self.indexes()) then
    if (_ModelOffset:=tModel.offset(vProperty))<>-1 then
      if vValues.indexes() then
      begin
        if vValues.range() then
          _FunctionCompare:=@compareRange;
        _ModelPointer:=pointer(self)+_ModelOffset;
        setLength(result,_ModelCount);
        for 0 to _ModelCount-1 do
        begin
          if _FunctionCompare(integer(_ModelPointer^),vValues) then
          begin
            result[_ModelIndex]:=tModel((_ModelPointer-_ModelOffset)^);
            _ModelIndex+=1;
          end;
          _ModelPointer+=ogl.size.model;
        end;
        setLength(result,_ModelIndex);
        exit(result);
      end;
end;

function tModels.first():tModel;
begin
  if not self.empty() then
    exit(self[0]);
end;

function tModels.height(vHeight:integer):tModels;
begin exit(self.find('height',[vHeight]));end;

function tModels.height(vHeights:tIntegerArray):tModels;overload;
begin exit(self.find('height',vHeights));end;

function tModels.id(vID:integer):tModels;
begin exit(self.find('id',vID));end;

function tModels.id(vIDs:tIntegerArray):tModels;overload;
begin exit(self.find('id',vIDs));end;

function tModels.indexes():integer;
begin exit(length(self));end;

function tModels.last():tModel;
begin
  if not self.empty() then
    exit(self[high(self)]);
end;

function tModels.positionX(vPositionX:integer):tModels;
begin exit(self.find('position.x',vPositionX));end;

function tModels.positionX(vPositionXs:tIntegerArray):tModels;overload;
begin exit(self.find('position.x',vPositionXs));end;

function tModels.positionY(vPositionY:integer):tModels;
begin exit(self.find('position.y',vPositionY));end;

function tModels.positionY(vPositionYs:tIntegerArray):tModels;overload;
begin exit(self.find('position.y',vPositionYs));end;

function tModels.reverse():tModels;
var
  _Decrease,
    _Increase:integer;
begin
  setLength(result,length(self));
  for _Decrease:=high(self) downTo 0 do
  begin
    result[_Increase]:=self[_Decrease];
    _Increase+=1;
  end;
  exit(result);
end;

function tModels.scale(vScale:integer):tModels;
begin exit(self.find('scale',vScale));end;

function tModels.scale(vScales:tIntegerArray):tModels;overload;
begin exit(self.find('scale',vScales));end;

function tModels.width(vWidth:integer):tModels;
begin exit(self.find('width',vWidth));end;

function tModels.width(vWidths:tIntegerArray):tModels;overload;
begin exit(self.find('width',vWidths));end;
