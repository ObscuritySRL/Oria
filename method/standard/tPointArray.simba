(*
  TPOINTARRAY
*)

function tPointArray.bounds():tBox;
var _Index:integer;
begin
  if not self.empty() then
  begin
    result:=[2147483647,2147483647,-2147483647,-2147483647];
    for _Index to high(self) do
      result:=[min(result.x1,self[_Index].x),min(result.y1,self[_Index].y),max(result.x2,self[_Index].x),max(result.y2,self[_Index].y)];
    exit(result);
  end;
end;

function tPointArray.closest(vCharacter:tCharacter):tPointArray;
begin exit(self.closest(vCharacter.position));end;

function tPointArray.closest(vModel:tModel):tPointArray;overload;
begin exit(self.closest(vModel.position));end;

function tPointArray.closest(vPoint:tPoint):tPointArray;overload;
begin
  result:=self;
  sortTPAFrom(result,vPoint);
  exit(result);
end;

function tPointArray.closest(vTexture:tTexture):tPointArray;overload;
begin exit(self.closest(vTexture.position));end;

function tPointArray.concat(vPoints:tPointArray):tPointArray;
begin
  insert(vPoints,self);
  exit(self);
end;

function tPointArray.contains(vPoint:tPoint):boolean;
var _Index:integer;
begin
  for _Index to high(self) do
    if compareMem(@self[_Index],@vPoint,sizeOf(tPoint)) then
      exit(true);
end;

function tPointArray.convex():tPointArray;
function crossProduct(vPoint1,vPoint2,vPoint3:tPoint):integer;
begin exit((vPoint2.x-vPoint1.x)*(vPoint3.y-vPoint1.y)-(vPoint2.y-vPoint1.y)*(vPoint3.x-vPoint1.x));end;
var
  _Index:integer;
  _Lower,
    _Upper,
    _Points:tPointArray;
begin
  _Points:=self;
  sortTPAByX(_Points,false);
  for _Index:=0 to high(_Points) do
  begin
    while (_Lower.indexes()>=2) and (crossProduct(_Lower[_Lower.indexes()-2],_Lower[_Lower.indexes()-1],_Points[_Index])<=0) do
      _Lower.pop();
    _Lower.push(_Points[_Index]);
  end;
  _Lower.pop();
  for _Index:=high(_Points) downTo 0 do
  begin
    while (_Upper.indexes()>=2) and (crossProduct(_Upper[_Upper.indexes()-2],_Upper[_Upper.indexes()-1],_Points[_Index])<=0) do
      _Upper.pop();
    _Upper.push(_Points[_Index]);
  end;
  _Upper.pop();
  exit(_Lower.concat(_Upper));
end;

function tPointArray.debug(vClear:boolean=false):tPointArray;
var
  _Debug,
    _Message,
    _Name:string;
  _Index:integer;
begin
  if vClear then
    clearDebug();
  _Name:=getGlobalName(@self);
  if _Name='' then
    _Name:='tPointArray';
  if length(self) then
  begin
    _Debug:=ogl.uptime()+' | '+ogl.script()+' > '+_Name+'[';
    _Message:=_Debug+'0..'+toStr(high(self))+']'+#13#10;
    for _Index to high(self) do
      _Message+=_Debug+toStr(_Index)+'] > '+toStr(self[_Index])+#13#10;
   _Message:=trim(_Message);
  end
  else
    _Message:=ogl.uptime()+' | '+ogl.script()+' > '+_Name+'[]';
  writeLN(_Message);
  exit(self);
end;

function tPointArray.empty():boolean;
begin exit(self.indexes()=0);end;

function tPointArray.eq(vIndex:integer):tPoint;
begin
  if vIndex<self.indexes() then
    exit(self[vIndex]);
end;

function tPointArray.find(vProperty:string;vValues:integer):tPointArray;
begin exit(self.find(vProperty,[vValues]));end;

function tPointArray.find(vProperty:string;vValues:tIntegerArray):tPointArray;overload;
function compareAll(vValue:integer;vValues:tIntegerArray):boolean;
var _Index:integer;
begin
  for _Index to high(vValues) do
    if vValue=vValues[_Index] then
      exit(true);
end;
function compareRange(vValue:integer;vValues:tIntegerArray):boolean;
begin exit((vValue>=vValues[0]) and (vValue<=vValues[high(vValues)]));end;
var
  _FunctionCompare:function(vValue:integer;vValues:tIntegerArray):boolean=@compareAll;
  _Count,
    _Index,
    _Offset:integer;
  _Pointer:pointer;
begin
  _Count:=self.indexes();
  if _Count then
  begin
    _Offset:=tPoint.offset(vProperty);
    if (_Offset<>-1) and (not vValues.empty()) then
    begin
      if vValues.range() then
        _FunctionCompare:=@compareRange;
      _Pointer:=pointer(self)+_Offset;
      setLength(result,_Count);
      for 0 to _Count-1 do
      begin
        if _FunctionCompare(integer(_Pointer^),vValues) then
        begin
          result[_Index]:=tPoint((_Pointer-_Offset)^);
          _Index+=1;
        end;
        _Pointer+=sizeOf(tPoint);
      end;
      setLength(result,_Index);
      exit(result);
    end;
  end;
end;

function tPointArray.first():tPoint;
begin
  if not self.empty() then
    exit(self[0]);
end;

function tPointArray.indexes():integer;
begin exit(length(self));end;

function tPointArray.inside(vBox:tBox):boolean;
var _Index:integer;
begin
  for _Index to high(self) do
    if not self[_Index].inside(vBox) then
      exit(false);
  exit(true);
end;

function tPointArray.inside(vPoints:tPointArray):boolean;overload;
var _Index:integer;
begin
  for _Index to high(self) do
    if not self[_Index].inside(vPoints) then
      exit(false);
  exit(true);
end;

function tPointArray.last():tPoint;
begin
  if not self.empty() then
    exit(self[high(self)]);
end;

function tPointArray.nonempty():boolean;
begin exit(not self.empty())end;

function tPointArray.pop():tPoint;
var _High:integer;
begin
  if not self.empty() then
  begin
    _High:=high(self);
    result:=self[_High];
    setLength(self,_High);
    exit(result);
  end;
end;

function tPointArray.push(vPoint:tPoint):integer;
var _Length:integer;
begin
  setLength(self,(_Length:=self.indexes())+1);
  self[_Length]:=vPoint;
  exit(_Length+1);
end;

function tPointArray.reverse():tPointArray;
var
  _Decrease,
    _Increase:integer;
begin
  setLength(result,self.indexes());
  for _Decrease:=high(self) downTo 0 do
  begin
    result[_Increase]:=self[_Decrease];
    _Increase+=1;
  end;
  exit(result);
end;

function tPointArray.shuffle(vOverwrite:boolean=false):tPointArray;
var _Index:integer;
begin
  result:=self;
  for _Index:=high(result) downto 0 do
    system.swap(result[_Index],result[random(_Index+1)]);
  if vOverwrite then
    self:=result;
  exit(result);
end;

function tPointArray.x(vX:integer):tPointArray;
begin exit(self.find('x',[vX]));end;

function tPointArray.x(vXs:tIntegerArray):tPointArray;overload;
begin exit(self.find('x',vXs));end;

function tPointArray.y(vY:integer):tPointArray;
begin exit(self.find('y',[vY]));end;

function tPointArray.y(vYs:tIntegerArray):tPointArray;overload;
begin exit(self.find('y',vYs));end;
