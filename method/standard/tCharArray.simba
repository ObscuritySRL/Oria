(*
  TCHARARRAY
*)

function tCharArray.concat(vChars:tCharArray):tCharArray;
begin
  insert(vChars,self);
  exit(self);
end;

function tCharArray.contains(vChar:char):boolean;
var _Index:integer;
begin
  for _Index to high(self) do
    if self[_Index]=vChar then
      exit(true);
end;

function tCharArray.debug(vClear:boolean=false):tCharArray;
var
  _Debug,
    _Message,
    _Name:string;
  _Index:integer;
begin
  if vClear then
    clearDebug();
  _Name:=getGlobalName(@self);
  if _Name='' then
    _Name:='tCharArray';
  if length(self) then
  begin
    _Debug:=ogl.uptime()+' | '+ogl.script()+' > '+_Name+'[';
    _Message:=_Debug+'0..'+toStr(high(self))+']'+#13#10;
    for _Index to high(self) do
      _Message+=_Debug+toStr(_Index)+'] > '+toStr(self[_Index])+#13#10;
   _Message:=trim(_Message);
  end
  else
    _Message:=ogl.uptime()+' | '+ogl.script()+' > '+_Name+'[]';
  writeLN(_Message);
  exit(self);
end;

function tCharArray.empty():boolean;
begin exit(self.indexes()=0);end;

function tCharArray.eq(vIndex:integer):char;
begin
  if vIndex<self.indexes() then
    exit(self[vIndex]);
end;

function tCharArray.find(vChar:char):tCharArray;
begin exit(self.find([vChar]));end;

function tCharArray.find(vChars:tCharArray):tCharArray;overload;
var
  _CharIndex,
    _ResultIndex:integer;
    _Char:char;
begin
  if (not self.empty()) and (not vChars.empty()) then
    begin
      setLength(result,self.indexes());
      for _CharIndex to self.indexes()-1 do
      begin
        _Char:=self[_CharIndex];
        if vChars.contains(_Char) then
        begin
          result[_ResultIndex]:=_Char;{Prevents strange access violations}
          _ResultIndex+=1;
        end;
      end;
      setLength(result,_ResultIndex);
      exit(result);
    end;
end;

function tCharArray.first():char;
begin
  if not self.empty() then
    exit(self[0]);
end;

function tCharArray.indexes():integer;
begin exit(length(self));end;

function tCharArray.integers():tIntegerArray;
var _Index:integer;
begin
  setLength(result,self.indexes());
  for _Index to high(self) do
    result[_Index]:=self[_Index].integer();
  exit(result);
end;

function tCharArray.last():char;
begin
  if not self.empty() then
    exit(self[high(self)]);
end;

function tCharArray.nonempty():boolean;
begin exit(not self.empty())end;

function tCharArray.pop():char;
var _High:integer;
begin
  if not self.empty() then
  begin
    _High:=high(self);
    result:=self[_High];
    setLength(self,_High);
    exit(result);
  end;
end;

function tCharArray.push(vChar:char):integer;
var _Length:integer;
begin
  setLength(self,(_Length:=self.indexes())+1);
  self[_Length]:=vChar;
  exit(_Length+1);
end;

function tCharArray.reverse():tCharArray;
var
  _Decrease,
    _Increase:integer;
begin
  setLength(result,self.indexes());
  for _Decrease:=high(self) downTo 0 do
  begin
    result[_Increase]:=self[_Decrease];
    _Increase+=1;
  end;
  exit(result);
end;

function tCharArray.shift():char;
begin exit(self.splice(0,1).eq(0));end;

function tCharArray.shuffle(vOverwrite:boolean=false):tCharArray;
var _Index:integer;
begin
  result:=self;
  for _Index:=high(result) downto 0 do
    system.swap(result[_Index],result[random(_Index+1)]);
  if vOverwrite then
    self:=result;
  exit(result);
end;

function tCharArray.splice(vIndex,vCount:integer):tCharArray;
var
  _CharIndex,
    _High,
    _ResultIndex:integer;
begin
  _High:=high(self);
  if (vIndex<=_High) and (vCount>0) then
  begin
    setLength(result,length(self));
    for _CharIndex to _High do
    begin
      if (_CharIndex>=vIndex) and (_ResultIndex<vCount) then
      begin
        result[_ResultIndex]:=self[_CharIndex];
        _ResultIndex+=1;
      end
      else
        self[_CharIndex-_ResultIndex]:=self[_CharIndex];
    end;
    setLength(result,_ResultIndex);
    setLength(self,_CharIndex-_ResultIndex);
  end;
end;

function tCharArray.unshift(vChar:char):integer;
begin
  insert([vChar],self);
  exit(length(self));
end;
